{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Sailor Moon Go",
        "description": "Personal project under Kenzan mentorship to explore swagger, openapi, nodejx, and more to create a Pokemon Go style game with Sailor Moon theme in place"
    },
    "schemes": [
        "https"
    ],
    "host": "simple.api",
    "basePath": "/openapi101",
    "paths": {
        "/characters": {
            "get": {
                "summary": "A list of characters",
                "description": "Return a list containing all characters a player can choose from",
                "responses": {
                    "200": {
                        "description": "A list of Characters",
                        "schema": {
                            "$ref": "#/definitions/Characters"
                        }
                    },
                    "500": {
                        "$ref": "#/responses/Standard500ErrorResponse"
                    }
                }
            },
            "post": {
                "summary": "Creates a character",
                "description": "Adds a new character to the characters list",
                "parameters": [
                    {
                        "name": "character",
                        "in": "body",
                        "description": "The character to create",
                        "schema": {
                            "$ref": "#/definitions/Character"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Character successsfully created"
                    },
                    "400": {
                        "description": "Character couldn't have been created"
                    },
                    "500": {
                        "$ref": "#/responses/Standard500ErrorResponse"
                    }
                }
            }
        },
        "/characters/{planet}": {
            "get": {
                "summary": "Gets a character",
                "description": "Returns a single character based on their planet",
                "parameters": [
                    {
                        "name": "planet",
                        "in": "path",
                        "required": true,
                        "description": "The character's planet",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Character",
                        "schema": {
                            "$ref": "#/definitions/Character"
                        }
                    },
                    "404": {
                        "description": "The Character does not exist"
                    },
                    "500": {
                        "$ref": "#/responses/Standard500ErrorResponse"
                    }
                }
            }
        }
    },
    "definitions": {
        "Character": {
            "description": "A single character",
            "required": [
                "planet"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "planet": {
                    "type": "string"
                }
            }
        },
        "Characters": {
            "description": "A list of characters",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Character"
            }
        },
        "Error": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "responses": {
        "Standard500ErrorResponse": {
            "description": "An unexpected error occured.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        }
    }
}